<?xml version="1.0" encoding="UTF-8"?>
<module id="AUX_SPIM" HW_revision="" XML_version="1.0" description="The AUX Serial Peripheral Interface Master (AUX_SPIM) enables AUX_SCE with power-efficient SPI communication.  

It is not possible to write a register while SPI transmission occurs. An attempt to do so will stall the bus until transmission is complete. 

Read of RX8.DATA or RX16.DATA stalls the bus until LSB has been captured. Read of SCLKIDLE.STAT or DATAIDLE.STAT stalls the bus until condition described is met. Other read operations do not stall the bus.

AUX_SCE becomes clock gated if it encounters a bus stall. This is useful as AUX_SCE can write TX8.DATA and then read RX8.DATA immediately to read a SPI slave. In such case there is no need for software to wait or to poll registers. 

AUX_SYSIF:PEROPRATE.SPIM_OP_RATE selects the peripheral clock frequency which is used to derive the SCLK frequency. 

AUX_SCE must set AUX_SYSIF:PEROPRATE.SPIM_OP_RATE to SCE_RATE to access and use AUX_SPIM. System CPU must set AUX_SYSIF:PEROPRATE.SPIM_OP_RATE to BUS_RATE to access and use AUX_SPIM. Failure to do so can result in incorrect SPI transmission.

" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="setup_parser.xsd">
   <register acronym="SPIMCFG" width="32" description="SPI Master Configuration

Write operation stalls until current transfer completes." id="SPIMCFG" offset="0x0">
      <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED8" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="6" end="2" rwaccess="RW" description="SCLK divider.

Peripheral clock frequency division gives the SCLK clock frequency. The division factor equals (2 * (DIV+1)):

0x00: Divide by 2.
0x01: Divide by 4.
0x02: Divide by 6.
... 
0x3F: Divide by 128.
" id="DIV" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="Phase of the MOSI and MISO data signals.

0: Sample MISO at leading (odd) edges and shift MOSI at trailing (even) edges of SCLK.
1: Sample MISO at trailing (even) edges and shift MOSI at leading (odd) edges of SCLK.
" id="PHA" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Polarity of the SCLK signal.

0: SCLK is low when idle, first clock edge rises.
1: SCLK is high when idle, first clock edge falls.
" id="POL" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="MISOCFG" width="32" description="MISO Configuration

Write operation stalls until current transfer completes." id="MISOCFG" offset="0x4">
      <bitfield range="" begin="31" width="27" end="5" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED5" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="4" width="5" end="0" rwaccess="RW" description="AUXIO to MISO mux.

Select the AUXIO pin that connects to MISO." id="AUXIO" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="MOSICTL" width="32" description="MOSI Control

Write operation stalls until current transfer completes." id="MOSICTL" offset="0x8">
      <bitfield range="" begin="31" width="31" end="1" rwaccess="WO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="WO" description="MOSI level control.

0: Set MOSI low.
1: Set MOSI high." id="VALUE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="TX8" width="32" description="Transmit 8 Bit

Write operation stalls until current transfer completes." id="TX8" offset="0xc">
      <bitfield range="" begin="31" width="24" end="8" rwaccess="WO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED8" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="8" end="0" rwaccess="WO" description="8 bit data transfer.

Write DATA to start transfer, MSB first. When transfer completes, MOSI stays at the value of LSB." id="DATA" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="TX16" width="32" description="Transmit 16 Bit

Write operation stalls until current transfer completes." id="TX16" offset="0x10">
      <bitfield range="" begin="31" width="16" end="16" rwaccess="WO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED16" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="15" width="16" end="0" rwaccess="WO" description="16 bit data transfer.

Write DATA to start transfer, MSB first. When transfer completes, MOSI stays at the value of LSB." id="DATA" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="RX8" width="32" description="Receive 8 Bit

Read operation stalls until current transfer completes." id="RX8" offset="0x14">
      <bitfield range="" begin="31" width="24" end="8" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED8" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="8" end="0" rwaccess="RO" description="Latest 8 bits received on MISO." id="DATA" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="RX16" width="32" description="Receive 16 Bit

Read operation stalls until current transfer completes." id="RX16" offset="0x18">
      <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED16" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="15" width="16" end="0" rwaccess="RO" description="Latest 16 bits received on MISO." id="DATA" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SCLKIDLE" width="32" description="SCLK Idle

Read operation stalls until SCLK is idle with no remaining clock edges." id="SCLKIDLE" offset="0x1c">
      <bitfield range="" begin="31" width="31" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Wait for SCLK idle.

Read operation stalls until SCLK is idle with no remaining clock edges. Read then returns 1.

AUX_SCE can use this to control CS deassertion." id="STAT" resetval="0x1">
      </bitfield>
   </register>
   <register acronym="DATAIDLE" width="32" description="Data Idle

Read operation stalls until current transfer completes." id="DATAIDLE" offset="0x20">
      <bitfield range="" begin="31" width="31" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="Wait for data idle.

Read operation stalls until the SCLK period associated with LSB transmission completes. Read then returns 1.

AUX_SCE can use this to control CS deassertion. " id="STAT" resetval="0x1">
      </bitfield>
   </register>
</module>
