trigger:
  branches:
    include: ["master", "develop", "release*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore", "README.md" ]

# no pr config, we want to trigger builds for all PRs on all branches

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

jobs:

##############################
- job: Check_Build_Options
  pool:
    vmImage: 'windows-2019'

  steps:
  
  - checkout: self

  # get commint message
  - powershell: |

      if($env:StartReleaseCandidate -like "true")
      {
        # this is a release prep so NO build
        echo "##vso[task.setvariable variable=SKIP_BUILD;isOutput=true]true"
        
        Write-Host "Release preparation, skipping build."
      }

    name: BuildOptions
    displayName: Evaluate build options

  - task: DotNetCoreCLI@2  
    inputs:
      command: custom
      custom: tool
      arguments: install -g nbgv
    condition: or( eq( variables['StartReleaseCandidate'], true ), ne(variables['system.pullrequest.isfork'], true) )
    displayName: Install NBGV tool

  - powershell: |

      # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
      # 'encoded token' is the Base64 of the string "nfbot:personal-token"
      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

      cd "$env:Agent_TempDirectory" > $null

      git init "$env:Agent_TempDirectory\repo"
      cd repo > $null
      git remote add origin "$env:Build_Repository_Uri"
      git config --global gc.auto 0
      git config --global user.name nfbot
      git config --global user.email nanoframework@outlook.com
      git config --global core.autocrlf true
      git -c http.extraheader="AUTHORIZATION: $auth" fetch --progress origin
      
      git checkout develop
      
      cd src

      # prepare release and capture output
      $release = nbgv prepare-release
  
      # get commit message for the merge
      $commitMessage = git log -1 --pretty=%B

      # amend commit message to skip build
      git commit --amend -m "$commitMessage" -m "***NO_CI***" > $null

      # push all changes to github
      git -c http.extraheader="AUTHORIZATION: $auth" push --all origin

      # get release branch name
      $branch = $release.Split(' ')[0]

      # start PR for release
      $prRequestBody = @{title="Release $branch";body="";head="$branch";base="master"} | ConvertTo-Json
      $githubApiEndpoint = "https://api.github.com/repos/$env:Build_Repository_Name/pulls"
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

      $headers = @{}
      $headers.Add("Authorization","$auth")
      $headers.Add("Accept","application/vnd.github.symmetra-preview+json")

      try 
      {
          $result = Invoke-RestMethod -Method Post -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer -Uri  $githubApiEndpoint -Header $headers -ContentType "application/json" -Body $prRequestBody
          'Started PR for new release...' | Write-Host -NoNewline
          'OK' | Write-Host -ForegroundColor Green
      }
      catch 
      {
          $result = $_.Exception.Response.GetResponseStream()
          $reader = New-Object System.IO.StreamReader($result)
          $reader.BaseStream.Position = 0
          $reader.DiscardBufferedData()
          $responseBody = $reader.ReadToEnd();

          "Error starting PR: $responseBody" | Write-Host -ForegroundColor Red
      }

    condition: eq( variables['StartReleaseCandidate'], true )
    displayName: NBGV prepare release

###########################################################
# build tool
- job: Build_tool
  condition: not( eq( dependencies.Check_Build_Options.outputs['BuildOptions.SKIP_BUILD'], true ) )
  dependsOn:
  - Check_Build_Options

  pool:
    vmImage: 'windows-2019'

  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    buildPlatform: 'x64'
    buildConfiguration: 'Release'
    solution: 'nanoFirmwareFlasher.sln'

  steps:

  # need this here in order to persist GitHub credentials
  - checkout: self
    persistCredentials: true

  - script: |
      git config --global user.email "nanoframework@outlook.com"
      git config --global user.name "nfbot"
    displayName: Setup git identity

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '4.9.3'
    displayName: 'Install specifc version of NuGet'

  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: 3.1.101
    displayName: Install .NET Core SDK

  - task: DotNetCoreCLI@2
    inputs:
      command: restore
      verbosityRestore: minimal # detailed, normal, minimal
      projects: source\nanoFirmwareFlasher.sln
      feedsToUse: config
      nugetConfigPath: source/NuGet.Config
      workingDirectory: source
    displayName: Restore NuGet packages

  - script: dotnet build -r win-x64 -c $(BuildConfiguration) /p:PublicRelease=true --no-restore /t:build,pack
    workingDirectory: source
    displayName: Build NuGet package

  - script: dotnet pack --runtime win-x64 -c $(BuildConfiguration) -p:PublicRelease=true -p:PackGlobalTool=true --no-restore
    workingDirectory: source
    displayName: Build .NET Core Tool NuGet package

  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: |
            $MyNuGetVersion = $env:NBGV_NuGetPackageVersion -replace "\-g$env:NBGV_GitCommitIdShort", ""

            # replace preview with alpha if this is a PR build
            if($env:Build_Reason -eq 'PullRequest')
            {
              $MyNuGetVersion = $MyNuGetVersion -replace "preview", "alpha"
            }

            Write-Host "NuGet build number is $MyNuGetVersion"

            Write-Host "$("##vso[task.setvariable variable=MY_NUGET_VERSION]")$MyNuGetVersion"
    condition: succeeded()
    displayName: Get NuGet build number

  # update could build number (only possible if this is not a PR from a fork)
  - task: PowerShell@2
    inputs:
        targetType: 'inline'
        script: Write-Host "$("##vso[build.updatebuildnumber]")$env:NBGV_NuGetPackageVersion"
    condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
    displayName: Update cloud build number

  - powershell: |
      # get subject and commit message for commit
      $commitMessage = git log --format='%B' -1

      # need to flatten message by removing new lines
      $commitMessage = $commitMessage -replace "`r`n", " "

      if($commitMessage -like "***PUBLISH_RELEASE***")
      {
        # set variable
        Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT]")false"
        Write-Host "Release draft: FALSE"
      }
      else
      {
        # set variable
        Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT]")true"
        Write-Host "Release draft: TRUE"
      }

    displayName: set release draft var

  - task: CopyFiles@1
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      Contents: |
        **\*.nupkg
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
    condition: succeeded()
    displayName: Collecting deployable artifacts

  # publish artifacts (only possible if this is not a PR originated on a fork)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: deployables
      ArtifactType: Container
    condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
    displayName: Publish deployables artifacts

  # push NuGet packages to AzureArtifacts feed (always happens except on PR builds)
  - task: NuGetCommand@2
    inputs:
      command: push
      nuGetFeedType: external
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      publishFeedCredentials: 'AzureArtifacts'
    condition: succeeded()
    continueOnError: true
    displayName: Push NuGet packages to AzureArtifacts

  # push NuGet class lib package to NuGet (happens on tag builds for any branch)
  - task: NuGetCommand@2
    inputs:
      command: push
      nuGetFeedType: external
      allowPackageConflicts: true
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      publishFeedCredentials: 'NuGet'
    condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') )
    continueOnError: true
    displayName: Push NuGet packages to NuGet

  # create or update GitHub release
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nanoFramework'
      githubOwner: 'nanoframework'
      githubRepositoryName: 'nanoFirmwareFlasher '
      githubTag: v$(MY_NUGET_VERSION)
      githubReleaseTitle: 'nano firmware flasher v$(MY_NUGET_VERSION)'
      githubReleaseNotes: 'add description here'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: $(RELEASE_DRAFT)
      githubReleasePrerelease: true
      githubReuseDraftOnly: true
      githubReuseRelease: true
      githubEditRelease: true
      githubDeleteEmptyTag: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ) )
    displayName: Create/Update GitHub release

  # create or update GitHub release ON tags from release or master branches
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nanoFramework'
      githubOwner: 'nanoframework'
      githubRepositoryName: 'nanoFirmwareFlasher '
      githubTag: v$(MY_NUGET_VERSION)
      githubReleaseTitle: 'nano firmware flasher v$(MY_NUGET_VERSION)'
      githubReleaseNotes: 'add description here'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: $(RELEASE_DRAFT)
      githubReleasePrerelease: true
      githubReuseDraftOnly: false
      githubReuseRelease: true
      githubEditRelease: true
      githubDeleteEmptyTag: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), contains(variables['Build.SourceBranch'], 'preview') )
    displayName: Create/Update GitHub PREVIEW release 

  # create or update GitHub release ON tags from release or master branches
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nanoFramework'
      githubOwner: 'nanoframework'
      githubRepositoryName: 'nanoFirmwareFlasher '
      githubTag: v$(MY_NUGET_VERSION)
      githubReleaseTitle: 'nano firmware flasher v$(MY_NUGET_VERSION)'
      githubReleaseNotes: 'add description here'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: false
      githubReleasePrerelease: false
      githubReuseDraftOnly: false
      githubReuseRelease: true
      githubEditRelease: false
      githubDeleteEmptyTag: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/$(nugetPackageName).$(MY_NUGET_VERSION).nupkg'
    condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'preview') ) )
    displayName: Create/Update GitHub stable release

##################################
# report build failure to Discord
- job: Report_Build_Failure
  dependsOn:
  - Check_Build_Options
  - Build_tool
  condition: or( failed('Check_Build_Options'), failed('Build_tool') )

  pool:
    vmImage: 'windows-2019'

  steps:

  - checkout: self

  # step from template @ nf-tools repo
  - template: azure-pipelines-templates/discord-webhook.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
