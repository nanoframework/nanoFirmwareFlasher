/* \file        cc26x2_xds.gel
 * \brief       GEL script for CC13x2/CC26x2 device family + XDS debuggers.
 *
 * \revision    $Revision$
 */
#define HWREG(x)                    (*(unsigned int)(x))
#define ENGR_PC_HIB_NEXT_CC26X2     0x10001932
#define ENGR_PC_END_CC26X2          0x10001214
#define FLASH_FWLOCK                0x4003003c
#define FLASH_FWFLAG                0x40030040

int _BoardResetMenuDefined = 0;
int _isMassErase = 0;

OnTargetConnect()
{
    // Complete device trimming if engineering device
    CompleteTrimOnEngrDevice();

    DefineResets(1);
}

OnPreFileLoaded()
{

    // Make sure device is in a known state before loading program.
    BoardReset_Automatic();

    ForceFlashTrimBeforeEraseAndProgram();
}

menuitem "CC13x2_CC26x2"
/**
 * \brief    This function issues a board reset before erasing the device flash.
 *           This function disconnects from target after completion.
 *           NOTE: If CM3 DAP is locked, make sure to disable "Custom configuration"
 *                 from all sub paths in the device's target connection file (.ccxml).
 */
hotmenu MassErase()
{
    GEL_TextOut("Initializing.\n", "MassErase()");
    _isMassErase = 1;

    // Disconnect from target. This must be done for each module in the device debug sub-system hierarchy.
    DisconnectIfConnected(); // Cortex
    GEL_EvalOnTarget("<parent>", "DisconnectIfConnected()", 1); // DAP (Cortex' parent)
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"DisconnectIfConnected()\", 1)", 1); // Icepick (DAP's parent)

    // Do board reset
    GEL_TextOut("Issuing Board Reset.\n", "MassErase()");
    GEL_AdvancedReset("Board Reset");

    // Reconnect to Icepick
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"ConnectIfDisconnected()\", 1)", 1);

    // Issue mass erase from Icepick and disconnect
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"IP_CC26xx_CHIPERASE = 1\", 1)", 1);
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"DisconnectIfConnected()\", 1)", 1);

    // Workaround on engineering devices. Disconnect and reconnect for chip erase to take effect.
    ConnectIfDisconnected();
    DisconnectIfConnected();
    _isMassErase = 0;

    GEL_TextOut("Mass erase complete.\n", "MassErase()");
}

/**
 * \brief    This function issues a board reset and restores the connection
 *           state.
 */
BoardReset_Automatic()
{
    // Store current state for each module in the debug sub-system hierarchy.
    ConnectStateStore(); // Cortex
    GEL_EvalOnTarget("<parent>", "ConnectStateStore()", 1); // DAP (Cortex' parent)
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"ConnectStateStore()\", 1)", 1); // Icepick (DAP's parent)

    // Disconnect
    DisconnectIfConnected(); // Cortex
    GEL_EvalOnTarget("<parent>", "DisconnectIfConnected()", 1); // DAP (Cortex' parent)
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"DisconnectIfConnected()\", 1)", 1); // Icepick (DAP's parent)

    // Issue board reset
    GEL_AdvancedReset("Board Reset");

    // Restore current state
    ConnectStateRestore();
    GEL_EvalOnTarget("<parent>", "ConnectStateRestore()", 1);
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"ConnectStateRestore()\", 1)", 0);

    if(GEL_IsConnected())
    {
        // Re-activate breakpoints
        GEL_RestoreDebugState();

        // Update GUI (Debug view not always updated)
        GEL_RefreshWindows();
    }

    GEL_TextOut("Board Reset Complete.\n");
}

/**
 * \brief    Engineering devices don't have trimmed flash after halt-in-boot.
 *           This function runs to end of boot flash to ensure flash is
 *           trimmed. This function assumes emulator is connected to target.
 */
CompleteTrimOnEngrDevice()
{
    int regVal = PC;
    if(regVal == ENGR_PC_HIB_NEXT_CC26X2)
    {
        // Engineering device has halted in boot. Run to end of ROM to
        // ensure device flash is trimmed.

        // Workaround to make chip erase work on early engineering devices. Run to breakpoint doesn't work after mass erase.
        if(_isMassErase == 0)
        {
            GEL_Go(ENGR_PC_END_CC26X2);
        }
    }
}

/**
 * \brief   This function defines custom resets and filters the list of
 *          available resets.
 * \param   neverAgain  Input argument to signal that resets should not be
 *                      defined again.
 */
DefineResets(int neverAgain)
{
    if(!_BoardResetMenuDefined)
    {
        // Remove all resets from the supplied index and up.
        // 4: Removes all resets except CPU reset, System Reset, "Board Reset" and "Board Reset (free run)"
        DEBUG_RemoveResets(4);

        // Define reset type
        DEBUG_DefineReset("Board Reset (automatic connect/disconnect)", "The same as a board reset, but debugger returns to the original connection state (connected or disconnected)", 0 /* 1 requires halt - 0 for allowing while running */, "BoardReset_Automatic()" );

        // Re-define Emulator Reset
        DEBUG_DefineReset("Reset Emulator", "", 8 /* All targets for the specific emulator connection must be halted*/, "EmulatorReset()");
    }

    if(neverAgain)
    {
        _BoardResetMenuDefined = 1;
    }
}

/** \brief Function issues "Emulator Reset" */
EmulatorReset()
{
    GEL_EvalOnTarget("<parent>","GEL_AdvancedReset(\"Reset Emulator\")", 1);
}

/** \brief  Make sure flash is trimmed for erase/program
*/
ForceFlashTrimBeforeEraseAndProgram()
{
    int fwFlag;

    HWREG(FLASH_FWLOCK) = 0x00000005;

    // FLASH.FWFLAG[0] = 0
    fwFlag = HWREG(FLASH_FWFLAG) & 0xFFFFFFFE;
    HWREG(FLASH_FWFLAG) = fwFlag;

    HWREG(FLASH_FWLOCK) = 0x00000000;
}

/** \brief This function is called when using Uniflash CLI argument --list-device-cmd */
GEL_CLI_ListCommands()
{
    GEL_TextOut("\n-------------------------------------------------
 COMMAND    DESCRIPTION
 PinReset   Reset CC13xx/CC26xx device using reset pin.
 MassErase  Erase flash using mass erase (cannot be combined with
            other operations). If the device debug interface is
            locked, a target configuration file (.ccxml) with
            argument custom=\"no\" must be used.
-------------------------------------------------\n");
}

/** \brief This implements pin reset function. It is called when using
           Uniflash CLI argument --post-flash-device-cmd PinReset */
GEL_CLI_PinReset()
{
    GEL_TextOut("Doing Pin Reset ...\n");

    // Disconnect from target
    DisconnectIfConnected(); // Cortex
    GEL_EvalOnTarget("<parent>", "DisconnectIfConnected()", 1); // DAP (Cortex' parent)
    GEL_EvalOnTarget("<parent>", "GEL_EvalOnTarget(\"<parent>\",\"DisconnectIfConnected()\", 1)", 1); // Icepick (DAP's parent)

    GEL_AdvancedReset("Board Reset (free run)");
}

/** \brief This implements mass erase function. It is called when using
           Uniflash CLI argument --post-flash-device-cmd MassErase */
GEL_CLI_MassErase()
{
    GEL_TextOut("Doing mass erase ...\n");
    MassErase();
}
