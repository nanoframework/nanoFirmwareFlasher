<?xml version="1.0" encoding="UTF-8"?>
<module id="AON_RTC" HW_revision="" XML_version="1.0" description="This component control the Real Time Clock residing in AON

Note: This module is only supporting 32 bit ReadWrite access. 
" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="setup_parser.xsd">
   <register acronym="CTL" width="32" description="Control

This register contains various  bitfields for configuration of RTC
RTL Name = CONFIG" id="CTL" offset="0x0">
      <bitfield range="" begin="31" width="13" end="19" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED19" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="18" width="3" end="16" rwaccess="RW" description="Eventmask selecting which delayed events that form the combined event.

" id="COMB_EV_MASK" resetval="0x0">
         <bitenum id="CH2" value="4" token="Use Channel 2 delayed event in combined event" description="Use Channel 2 delayed event in combined event"/>
         <bitenum id="CH1" value="2" token="Use Channel 1 delayed event in combined event" description="Use Channel 1 delayed event in combined event"/>
         <bitenum id="CH0" value="1" token="Use Channel 0 delayed event in combined event" description="Use Channel 0 delayed event in combined event"/>
         <bitenum id="NONE" value="0" token="No event is selected for combined event." description="No event is selected for combined event."/>
      </bitfield>
      <bitfield range="" begin="15" width="4" end="12" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED12" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="11" width="4" end="8" rwaccess="RW" description="Number of SCLK_LF clock cycles waited before generating delayed events. (Common setting for all RTC cannels)  the delayed event is delayed
" id="EV_DELAY" resetval="0x0">
         <bitenum id="D144" value="13" token="Delay by 144 clock cycles" description="Delay by 144 clock cycles"/>
         <bitenum id="D128" value="12" token="Delay by 128 clock cycles" description="Delay by 128 clock cycles"/>
         <bitenum id="D112" value="11" token="Delay by 112 clock cycles" description="Delay by 112 clock cycles"/>
         <bitenum id="D96" value="10" token="Delay by 96 clock cycles" description="Delay by 96 clock cycles"/>
         <bitenum id="D80" value="9" token="Delay by 80 clock cycles" description="Delay by 80 clock cycles"/>
         <bitenum id="D64" value="8" token="Delay by 64 clock cycles" description="Delay by 64 clock cycles"/>
         <bitenum id="D48" value="7" token="Delay by 48 clock cycles" description="Delay by 48 clock cycles"/>
         <bitenum id="D32" value="6" token="Delay by 32 clock cycles" description="Delay by 32 clock cycles"/>
         <bitenum id="D16" value="5" token="Delay by 16 clock cycles" description="Delay by 16 clock cycles"/>
         <bitenum id="D8" value="4" token="Delay by 8 clock cycles" description="Delay by 8 clock cycles"/>
         <bitenum id="D4" value="3" token="Delay by 4 clock cycles" description="Delay by 4 clock cycles"/>
         <bitenum id="D2" value="2" token="Delay by 2 clock cycles" description="Delay by 2 clock cycles"/>
         <bitenum id="D1" value="1" token="Delay by 1 clock cycles" description="Delay by 1 clock cycles"/>
         <bitenum id="D0" value="0" token="No delay on delayed event" description="No delay on delayed event"/>
      </bitfield>
      <bitfield range="" begin="7" width="1" end="7" rwaccess="WO" description="RTC Counter reset.

Writing 1 to this bit will reset the RTC counter.

This bit is cleared when reset takes effect" id="RESET" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="6" width="4" end="3" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED3" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="2" width="1" end="2" rwaccess="RW" description="RTC_4KHZ is a 4 KHz reference output, tapped from  SUBSEC.VALUE  bit 19 which is used by AUX timer. 

0: RTC_4KHZ signal is forced to 0
1: RTC_4KHZ is enabled ( provied that RTC is enabled EN)

" id="RTC_4KHZ_EN" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="1" width="1" end="1" rwaccess="RW" description="RTC_UPD is a 16 KHz signal used to sync up the radio timer. The 16 Khz is SCLK_LF divided by 2

0: RTC_UPD signal is forced to 0
1: RTC_UPD signal is toggling @16 kHz

" id="RTC_UPD_EN" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Enable RTC counter

0: Halted (frozen)
1: Running

" id="EN" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="EVFLAGS" width="32" description="Event Flags, RTC Status

This register contains event flags from the 3 RTC channels. Each flag will be cleared when writing a &#39;1&#39; to the corresponding bitfield.

" id="EVFLAGS" offset="0x4">
      <bitfield range="" begin="31" width="15" end="17" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED17" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="16" width="1" end="16" rwaccess="RW" description="Channel 2 event flag, set when CHCTL.CH2_EN = 1 and the RTC value matches or passes the CH2CMP value.

An event will be scheduled to occur as soon as possible when writing to CH2CMP provided that the channel is enabled and the new value matches any time between next  RTC value and 1 second in the past

Writing 1 clears this flag.

AUX_SCE can read the flag through AUX_EVCTL:EVSTAT2.AON_RTC_CH2 and clear it using AUX_SYSIF:RTCEVCLR.RTC_CH2_EV_CLR.
" id="CH2" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="15" width="7" end="9" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED9" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="8" width="1" end="8" rwaccess="RW" description="Channel 1 event flag, set when CHCTL.CH1_EN = 1 and one of the following:
- CHCTL.CH1_CAPT_EN = 0 and the RTC value matches or passes the CH1CMP value.
- CHCTL.CH1_CAPT_EN = 1 and capture occurs.

An event will be scheduled to occur as soon as possible when writing to CH1CMP provided that the channel is enabled, in compare mode and the new value matches any time between next  RTC value and 1 second in the past.

Writing 1 clears this flag.

" id="CH1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="7" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="Channel 0 event flag, set when CHCTL.CH0_EN = 1 and the RTC value matches or passes the CH0CMP value.

An event will be scheduled to occur as soon as possible when writing to CH0CMP provided that the channels is enabled and the new value matches any time between next  RTC value and 1 second in the past.

Writing 1 clears this flag.

" id="CH0" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SEC" width="32" description="Second Counter Value, Integer Part" id="SEC" offset="0x8">
      <bitfield range="" begin="31" width="32" end="0" rwaccess="RW" description="Unsigned integer representing Real Time Clock in seconds. 

When reading this register the content of SUBSEC.VALUE is simultaneously latched. A consistent reading of the combined Real Time Clock can be obtained by first reading this register, then reading SUBSEC register.
" id="VALUE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SUBSEC" width="32" description="Second Counter Value, Fractional Part" id="SUBSEC" offset="0xc">
      <bitfield range="" begin="31" width="32" end="0" rwaccess="RW" description="Unsigned integer representing Real Time Clock in fractions of a second (VALUE/2^32 seconds) at the time when SEC register was read.

Examples : 
- 0x0000_0000 = 0.0 sec
- 0x4000_0000 = 0.25 sec
- 0x8000_0000 = 0.5 sec
- 0xC000_0000 = 0.75 sec

" id="VALUE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SUBSECINC" width="32" description="Subseconds Increment
Value added to SUBSEC.VALUE on every SCLK_LFclock cycle." id="SUBSECINC" offset="0x10">
      <bitfield range="" begin="31" width="8" end="24" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED24" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="23" width="24" end="0" rwaccess="RO" description="This value compensates for a SCLK_LF clock which has an offset from 32768 Hz.

The compensation value can be found as 2^38 / freq, where freq is SCLK_LF clock frequency in Hertz

This value is added to SUBSEC.VALUE on every cycle, and carry of this is added to SEC.VALUE. To perform the addition, bits [23:6] are aligned with SUBSEC.VALUE bits [17:0]. The remaining bits [5:0] are accumulated in a hidden 6-bit register that generates a carry into the above mentioned addition on overflow.
The default value corresponds to incrementing by precisely 1/32768 of a second.

NOTE: This register is read only. Modification of the register value must be done using registers AUX_SYSIF:RTCSUBSECINC0 ,  AUX_SYSIF:RTCSUBSECINC1 and  AUX_SYSIF:RTCSUBSECINCCTL

" id="VALUEINC" resetval="0x800000">
      </bitfield>
   </register>
   <register acronym="CHCTL" width="32" description="Channel Configuration
" id="CHCTL" offset="0x14">
      <bitfield range="" begin="31" width="13" end="19" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED19" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="18" width="1" end="18" rwaccess="RW" description="Set to enable continuous operation of Channel 2
" id="CH2_CONT_EN" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="17" width="1" end="17" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED17" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="16" width="1" end="16" rwaccess="RW" description="RTC Channel 2 Enable

0: Disable RTC Channel 2
1: Enable RTC Channel 2

" id="CH2_EN" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="15" width="6" end="10" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED10" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="9" width="1" end="9" rwaccess="RW" description="Set Channel 1 mode

0: Compare mode (default)
1: Capture mode

" id="CH1_CAPT_EN" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="8" width="1" end="8" rwaccess="RW" description="RTC Channel 1 Enable

0: Disable RTC Channel 1
1: Enable RTC Channel 1

" id="CH1_EN" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="7" width="7" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="RTC Channel 0 Enable

0: Disable RTC Channel 0
1: Enable RTC Channel 0

" id="CH0_EN" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="CH0CMP" width="32" description="Channel 0 Compare Value
" id="CH0CMP" offset="0x18">
      <bitfield range="" begin="31" width="32" end="0" rwaccess="RW" description="RTC Channel 0 compare value.

Bit 31 to 16 represents seconds and bits 15 to 0 represents subseconds of the compare value.

The compare value is compared against SEC.VALUE (15:0) and SUBSEC.VALUE (31:16) values of the Real Time Clock register. A Cannel 0 event is generated when {SEC.VALUE(15:0),SUBSEC.VALUE (31:16)} is reaching or exciting the compare value. 

Writing to this register can trigger an immediate*) event in case the new compare value matches a Real Time Clock  value from 1 second in the past up till current Real Time Clock value.

Example:
To generate a compare  5.5 seconds RTC start,- set this value = 0x0005_8000

*) It can take up to one SCLK_LF clock cycles before event occurs due to synchronization.
" id="VALUE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="CH1CMP" width="32" description="Channel 1 Compare Value
" id="CH1CMP" offset="0x1c">
      <bitfield range="" begin="31" width="32" end="0" rwaccess="RW" description="RTC Channel 1 compare value.

Bit 31 to 16 represents seconds and bits 15 to 0 represents subseconds of the compare value.

The compare value is compared against SEC.VALUE (15:0) and SUBSEC.VALUE (31:16) values of the Real Time Clock register. A Cannel 0 event is generated when {SEC.VALUE(15:0),SUBSEC.VALUE (31:16)} is reaching or exciting the compare value. 

Writing to this register can trigger an immediate*) event in case the new compare value matches a Real Time Clock  value from 1 second in the past up till current Real Time Clock value.

Example:
To generate a compare  5.5 seconds RTC start,- set this value = 0x0005_8000

*) It can take up to one SCLK_LF clock cycles before event occurs due to synchronization.
" id="VALUE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="CH2CMP" width="32" description="Channel 2 Compare Value
" id="CH2CMP" offset="0x20">
      <bitfield range="" begin="31" width="32" end="0" rwaccess="RW" description="RTC Channel 2 compare value.

Bit 31 to 16 represents seconds and bits 15 to 0 represents subseconds of the compare value.

The compare value is compared against SEC.VALUE (15:0) and SUBSEC.VALUE (31:16) values of the Real Time Clock register. A Cannel 0 event is generated when {SEC.VALUE(15:0),SUBSEC.VALUE (31:16)} is reaching or exciting the compare value. 

Writing to this register can trigger an immediate*) event in case the new compare value matches a Real Time Clock  value from 1 second in the past up till current Real Time Clock value.

Example:
To generate a compare  5.5 seconds RTC start,- set this value = 0x0005_8000

*) It can take up to one SCLK_LF clock cycles before event occurs due to synchronization.
" id="VALUE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="CH2CMPINC" width="32" description="Channel 2 Compare Value Auto-increment

This register is primarily used to generate periodical wake-up for the AUX_SCE module, through the [AUX_EVCTL.EVSTAT0.AON_RTC] event.
" id="CH2CMPINC" offset="0x24">
      <bitfield range="" begin="31" width="32" end="0" rwaccess="RW" description="If CHCTL.CH2_CONT_EN is set, this value is added to CH2CMP.VALUE on every channel 2 compare event.
" id="VALUE" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="CH1CAPT" width="32" description="Channel 1 Capture Value

If CHCTL.CH1_EN = 1and CHCTL.CH1_CAPT_EN = 1, capture occurs on each rising edge of the event selected in AON_EVENT:RTCSEL.
" id="CH1CAPT" offset="0x28">
      <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Value of SEC.VALUE bits 15:0 at capture time." id="SEC" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="15" width="16" end="0" rwaccess="RO" description="Value of SUBSEC.VALUE bits 31:16 at capture time." id="SUBSEC" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SYNC" width="32" description="AON Synchronization

This register is used for synchronizing between MCU and entire AON domain. " id="SYNC" offset="0x2c">
      <bitfield range="" begin="31" width="31" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RW" description="This register will always return 0,- however it will not return the value until there are no outstanding write requests between MCU and AON

Note: Writing to this register prior to reading will force a wait until next SCLK_MF  edge. This is recommended for syncing read registers from AON when waking up from sleep
Failure to do so may result in reading AON values from prior to going to sleep" id="WBUSY" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="TIME" width="32" description="Current  Counter Value" id="TIME" offset="0x30">
      <bitfield range="" begin="31" width="16" end="16" rwaccess="RO" description="Returns the lower halfword of SEC register." id="SEC_L" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="15" width="16" end="0" rwaccess="RO" description="Returns the upper halfword of SUBSEC register." id="SUBSEC_H" resetval="0x0">
      </bitfield>
   </register>
   <register acronym="SYNCLF" width="32" description="Synchronization to SCLK_LF
This register is used for synchronizing MCU to positive or negative edge of SCLK_LF." id="SYNCLF" offset="0x34">
      <bitfield range="" begin="31" width="31" end="1" rwaccess="RO" description="Software should not rely on the value of a reserved. Writing any other value than the reset value may result in undefined behavior." id="RESERVED1" resetval="0x0">
      </bitfield>
      <bitfield range="" begin="0" width="1" end="0" rwaccess="RO" description="This bit will always return the SCLK_LF phase. The return will delayed until a positive or negative edge of SCLK_LF is seen.
0: Falling edge of SCLK_LF
1: Rising edge of SCLK_LF" id="PHASE" resetval="0x0">
      </bitfield>
   </register>
</module>
